version: '3'

services:

  # nginx
  nginx:
    image: nginx:1.19.2-alpine
    container_name: nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./../../nginx-proxy/config:/etc/nginx/conf.d
      - ./../../nginx-proxy/data/certbot/conf:/etc/letsencrypt
      - ./../../nginx-proxy/data/certbot/www:/var/www/certbot
    restart: always
    links:
      - router:ROUTER
      - client:CLIENT
      - app:RT_APP
      - chat:RT_CHAT
      - backend:BACKEND
    networks:
      proxy-tier:

  certbot:
    image: certbot/certbot
    container_name: certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./../../nginx-proxy/data/certbot/conf:/etc/letsencrypt
      - ./../../nginx-proxy/data/certbot/www:/var/www/certbot
    restart: always
    networks:
      proxy-tier:


  # router
  mongo_router:
    container_name: mongo_router
    restart: always
    image: mongo:latest
    volumes:
       - ./data/mongodbdata_router:/data/router/db
       - ./etc/mongod.conf:/etc/mongo/mongod.conf
    ports:
      - '27030:27017'
    command: --config /etc/mongo/mongod.conf
    networks: 
      router_net:

  router:
    image: 'bombremann/router'
    container_name: router
    restart: always
    environment: 
      - MONGO=mongodb://mongo_router:27017/rt_router
      - PORT=443
      - PORT_INTERNAL=3080
    build: ./realtime_cluster/router
    ports:
      - "3080:3080"
    depends_on:
      - mongo_router
    links:
      - mongo_router
    networks: 
      router_net:
      proxy-tier:

  #rt_app
  mongo_app:
    container_name: mongo_app
    restart: always
    image: mongo:latest
    volumes:
       - ./data/mongodbdata_app:/data/app/db
       - ./etc/mongod.conf:/etc/mongo/mongod.conf
    ports:
      - '27017:27017'
    command: --config /etc/mongo/mongod.conf
    networks: 
      rt_app_net:
  app:
    image: 'bombremann/rt_app'
    container_name: rt_app
    restart: always
    environment: 
      - APP_TYPE=application
      - MONGO=mongodb://mongo_app:27017/rt_app
      - ROUTER=https://bombremann-router.kkf-solutions.de/applications
      - PORT=443
      - PORT_INTERNAL=3050
      - HOST=bombremann-app.kkf-solutions.de
      # Echtzeit Bedingung - dieser wert darf nicht uberschritten werden in der rt_server -> backend kommunikation (in ms)
      - RT_CONSTRAIN=500
      # Es besteht die Moglichkeit die Nachrichen an das Backend hinauszuzuggern um den Server nicht zu uberlasten - Gefahr bottleneck
      - MESSAGE_AWAITER=1
    build: ./realtime_cluster/rt_application
    ports:
      - "3050:3050"
    depends_on:
      - mongo_app
      # - router
    links:
      - mongo_app
    networks: 
      rt_app_net:
      proxy-tier:

  # rt_chat
  mongo_chat:
    container_name: mongo_chat
    restart: always
    image: mongo:latest
    volumes:
       - ./data/mongodbdata_chat:/data/chat/db
       - ./etc/mongod.conf:/etc/mongo/mongod.conf
    ports:
      - '27020:27017'
    command: --config /etc/mongo/mongod.conf
    networks: 
      rt_chat_net:

  chat:
    image: 'bombremann/rt_chat'
    container_name: rt_chat
    restart: always
    environment: 
      - APP_TYPE=chat
      - MONGO=mongodb://mongo_chat:27017/rt_chat
      - ROUTER=https://bombremann-router.kkf-solutions.de/applications
      - PORT=443
      - PORT_INTERNAL=3040
      - HOST=bombremann-chat.kkf-solutions.de
      # Just als placeholder damit versehentlich kein Fehler fliegt
      - RT_CONSTRAIN=60000
      # Just als placeholder damit versehentlich kein Fehler fliegt
      - MESSAGE_AWAITER=1
    build: ./realtime_cluster/rt_application
    ports:
      - "3040:3040"
    depends_on:
      - mongo_chat
      # - router
    links:
      - mongo_chat
    networks: 
      rt_chat_net:
      proxy-tier:
  
  # backend
  mongo_backend:
    container_name: mongo_backend
    restart: always
    image: mongo:latest
    volumes:
       - ./data/mongodbdata_backend:/data/backend/db
       - ./etc/mongod.conf:/etc/mongo/mongod.conf
    ports:
      - '27040:27017'
    command: --config /etc/mongo/mongod.conf
    networks: 
      game_backend_net:
  backend:
    image: 'bombremann/backend'
    container_name: game_backend
    restart: always
    environment: 
      - MONGO=mongodb://mongo_backend:27017/bombremann_backend
      - ROUTER=https://bombremann-router.kkf-solutions.de/applications
      - PORT=443
      - PORT_INTERNAL=8080
      - HOST=bombremann-backend.kkf-solutions.de
    build: 
      context: ./game/bombremann_backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - mongo_backend
      # - router
      # - app
      # - chat
    links:
      - mongo_backend
    networks: 
      game_backend_net:
      proxy-tier:

  # client
  client:
    image: 'bombremann/client'
    container_name: bombremann_client
    restart: always
    build: ./game/bombremann
    ports:
      - "3000:3000"
    networks: 
      proxy-tier:

networks: 
  rt_app_net:
    external: 
      name: rt_app_net
  rt_chat_net:
    external: 
      name: rt_chat_net
  router_net:
    external:
      name: router_net
  game_backend_net:
    external:
      name: game_backend_net
  proxy-tier:
    external:
      name: nginx-proxy
